## Creating Virtual Environments for Django using pipenv

Pipenv: Pipenv is a tool for managing Python project dependencies and virtual environments. It combines the functionality of pip (package installation) and virtualenv (virtual environment creation) into a single tool. Pipenv aims to simplify dependency management by providing a streamlined workflow and automatic environment activation.

1. Installation: You can install Pipenv by running the following command:

pip install pipenv

2. Creating a new project: To start a new project with Pipenv, navigate to the project's directory using the terminal or command prompt and run the following command:

pipenv --python 3.11

# For Windows (GitBash prompt) - This creates a new virtual environment for the project, using Python 3.11 (replace with your desired Python version).

python -m pipenv --python 3.11 

Creating a virtualenv for this project...
Pipfile: E:\onedrive\Rohit\certificates\eduonix\2_web_development_django\Pipfile
Using C:/Python311/python.exe (3.11.0) to create virtualenv...
[    ] Creating virtual environment...created virtual environment CPython3.11.0.final.0-64 in 11799ms
  creator CPython3Windows(dest=C:\Users\rohit\.virtualenvs\2_web_development_django-XOwsaMNC, clear=False, no_vcs_ignore=False, global=False)
  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=C:\Users\rohit\AppData\Local\pypa\virtualenv)
    added seed packages: pip==23.1.2, setuptools==68.0.0, wheel==0.40.0
  activators BashActivator,BatchActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator

Successfully created virtual environment!
Virtualenv location: C:\Users\rohit\.virtualenvs\2_web_development_django-XOwsaMNC
Creating a Pipfile for this project...

3. Adding dependencies: To add a package dependency to your project, use the pipenv install command followed by the package name. For example, to install Django, run:

pipenv install django     (This installs Django and automatically updates the Pipfile and Pipfile.lock files, which keep track of your project's dependencies.)

# For Windows 
python -m pipenv install django

Installing django...
Resolving django... 
Adding django to Pipfile's [packages] ...
Installation Succeeded
Pipfile.lock not found, creating...
Locking [packages] dependencies... 
Building requirements...
Resolving dependencies...
Success!
Locking [dev-packages] dependencies...
Updated Pipfile.lock (59a064f055bfda3ad3323efe9a4c40d8b21d9cec899d72308e2abd62dbf0366f)!
Installing dependencies from Pipfile.lock (f0366f)...
To activate this project's virtualenv, run pipenv shell.
Alternatively, run a command inside the virtualenv with pipenv run.

4. Activating the virtual environment: To activate the virtual environment and access the project's shell, run:

pipenv shell    (This command activates the virtual environment and opens a new shell within it.)

# For Windows 
python -m pipenv shell

5. Running Python scripts: Once inside the Pipenv shell, you can run Python scripts or interact with the installed packages as you would in a regular Python environment.

6. Deactivating the virtual environment: To exit the virtual environment and return to your system's default Python environment, use the exit command or press Ctrl + D.

7. Managing dependencies: Pipenv provides additional commands for managing dependencies. For example:

pipenv install --dev installs development dependencies.
pipenv update updates all packages to their latest compatible versions.
pipenv lock generates a lockfile (Pipfile.lock) with exact versions for all installed packages.

## Setting up Django

1. activate your virtual environment and check present working dir

python -m pipenv shell

pwd

2. Create a Django project (This command create a mysite dir in current dir)

django-admin startproject mysite .         

# Check contents of mysite

$ ls -l mysite/
total 10
-rw-r--r-- 1 rohit 197121    0 Jul 15 10:02 __init__.py
-rw-r--r-- 1 rohit 197121  405 Jul 15 10:02 asgi.py    
-rw-r--r-- 1 rohit 197121 3344 Jul 15 10:02 settings.py
-rw-r--r-- 1 rohit 197121  784 Jul 15 10:02 urls.py    
-rw-r--r-- 1 rohit 197121  405 Jul 15 10:02 wsgi.py    






